You are given a two-dimensional list of integers matrix. You are currently at the top left corner and want to move to the bottom right corner. In each move, you can move down or right.

Return the maximum product of the cells visited by going to the bottom right cell. If the result is negative, return -1. Otherwise, mod the result by 10 ** 9 + 7.

Constraints

    1 ≤ n, m ≤ 20 where n and m are the number of rows and columns in matrix
    -2 ≤ matrix[r][c] ≤ 2

Example 1
Input

matrix = [
    [2, 1, -2],
    [-1, -1, -2],
    [1, 1, 1]
]

Output

8

Explanation

We can take the following path: [2, 1, -2, -2, 1].

  
  

int solve(vector<vector<int>>& matrix) {
    int n = matrix.size(), m = matrix[0].size();
//for each position we calculate maximum product and minimum product possible
    long long dpmax[n][m];
    long long dpmin[n][m];

    long long pr = 1, md = 1e9 + 7;
    int i, j;
    for (i = 0; i < m; i++) {
        pr *= (matrix[0][i]);
        dpmax[0][i] = pr;
        dpmin[0][i] = pr;
    }
    pr = 1;
    for (i = 0; i < n; i++) {
        pr *= (matrix[i][0]);
        dpmax[i][0] = pr;
        dpmin[i][0] = pr;
    }
   long long v1,v2,v3,v4;
    for (i = 1; i < n; i++) {
        for (j = 1; j < m; j++) {
          //lookin for different possible values from table
           v1 =  matrix[i][j] * dpmin[i - 1][j] ;
           v2 =  matrix[i][j]* dpmin[i][j - 1] ;
            v3 =  matrix[i][j]* dpmax[i - 1][j] ;
            v4 =  matrix[i][j] * dpmax[i][j - 1] ;
            if(matrix[i][j]<0)
            {
            dpmin[i][j] = min(v3, v4);
            dpmax[i][j]=max(v1,v2);
            }
            else
            {
            dpmin[i][j]=min(v1,v2);
            dpmax[i][j]=max(v3,v4);
            }
            

           // cout<<dpmax[i][j]<<' '<<dpmin[i][j]<<'\n';
        }
    }

    if (dpmax[n - 1][m - 1] < 0) return -1;
    return dpmax[n - 1][m - 1]%md;
}
//[[1,2,0,0,-2,0,0,1,1,1,-1,1,-2,0,1,-1,-2,-2,-1,-1],[0,2,1,2,2,0,2,-1,-2,-2,-1,-2,-1,2,-2,0,1,2,0,2],[2,-2,-2,1,0,-1,2,2,0,1,2,-2,1,0,2,-2,-2,0,0,-1],[1,-2,0,2,0,1,1,-2,0,1,-1,1,0,-2,0,-2,2,-2,-2,1],[-1,2,-1,-1,-1,-2,-1,-2,-2,1,-2,-2,-1,1,1,-2,1,2,2,-2],[1,-2,0,2,-1,1,1,-2,2,-2,0,-1,-2,1,1,0,1,-2,2,1],[0,-2,2,1,1,-2,2,-2,2,1,-1,0,-1,1,0,0,2,0,1,-2],[-1,1,1,1,1,-1,0,-2,-1,-2,-1,-1,-1,2,1,0,1,-2,0,-1],[-2,1,2,-1,-1,2,-2,0,-2,0,2,0,2,-1,0,0,2,-1,-2,1],[1,0,-1,1,-1,-2,2,-1,1,-1,-2,1,2,2,2,-1,1,-1,0,-2],[2,2,1,1,-1,1,-2,1,0,-2,1,-2,-2,2,-2,-1,1,0,-1,0],[0,0,2,2,-1,0,-2,1,2,-1,-1,2,-1,-1,0,-2,1,2,0,2],[0,2,2,2,-1,1,0,2,2,1,2,1,-2,2,2,1,1,2,0,-1],[-2,1,2,-2,-1,-1,-2,1,1,0,-1,2,1,2,1,0,1,2,2,-2],[0,0,-2,2,0,-2,1,-2,-2,-2,0,1,-1,-1,-2,2,0,1,0,1],[0,0,-1,1,1,1,-2,-2,0,-2,-2,-2,-2,2,2,0,0,0,0,-2],[0,1,-1,-2,0,1,-1,-2,0,1,1,0,1,-2,2,1,-1,2,0,-1],[1,1,1,-2,-1,-1,0,-1,-1,-2,2,-1,-2,0,-1,2,-1,-1,2,-1],[0,-2,-1,-1,0,2,2,1,2,0,0,1,0,-2,-1,-2,-2,2,-1,1],[-1,1,2,1,2,-2,1,2,-2,-2,0,1,2,2,-1,0,2,-2,-2,-1]]
//[[1,2,0,0,-2,0,0,1,1,1,-1,1,-2,0,1,-1,-2,-2,-1,-1],[0,2,1,2,2,0,2,-1,-2,-2,-1,-2,-1,2,-2,0,1,2,0,2],[2,-2,-2,1,0,-1,2,2,0,1,2,-2,1,0,2,-2,-2,0,0,-1],[1,-2,0,2,0,1,1,-2,0,1,-1,1,0,-2,0,-2,2,-2,-2,1],[-1,2,-1,-1,-1,-2,-1,-2,-2,1,-2,-2,-1,1,1,-2,1,2,2,-2],[1,-2,0,2,-1,1,1,-2,2,-2,0,-1,-2,1,1,0,1,-2,2,1],[0,-2,2,1,1,-2,2,-2,2,1,-1,0,-1,1,0,0,2,0,1,-2],[-1,1,1,1,1,-1,0,-2,-1,-2,-1,-1,-1,2,1,0,1,-2,0,-1],[-2,1,2,-1,-1,2,-2,0,-2,0,2,0,2,-1,0,0,2,-1,-2,1],[1,0,-1,1,-1,-2,2,-1,1,-1,-2,1,2,2,2,-1,1,-1,0,-2],[2,2,1,1,-1,1,-2,1,0,-2,1,-2,-2,2,-2,-1,1,0,-1,0],[0,0,2,2,-1,0,-2,1,2,-1,-1,2,-1,-1,0,-2,1,2,0,2],[0,2,2,2,-1,1,0,2,2,1,2,1,-2,2,2,1,1,2,0,-1],[-2,1,2,-2,-1,-1,-2,1,1,0,-1,2,1,2,1,0,1,2,2,-2],[0,0,-2,2,0,-2,1,-2,-2,-2,0,1,-1,-1,-2,2,0,1,0,1],[0,0,-1,1,1,1,-2,-2,0,-2,-2,-2,-2,2,2,0,0,0,0,-2],[0,1,-1,-2,0,1,-1,-2,0,1,1,0,1,-2,2,1,-1,2,0,-1],[1,1,1,-2,-1,-1,0,-1,-1,-2,2,-1,-2,0,-1,2,-1,-1,2,-1],[-1,1,2,1,2,-2,1,2,-2,-2,0,1,2,2,-1,0,2,-2,-2,-1]]
